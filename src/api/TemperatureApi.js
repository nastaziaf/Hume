/*
 * Hume
 * This is an API for Hume
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InvalidInput', 'model/InvalidTemp', 'model/TempResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InvalidInput'), require('../model/InvalidTemp'), require('../model/TempResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Hume) {
      root.Hume = {};
    }
    root.Hume.TemperatureApi = factory(root.Hume.ApiClient, root.Hume.InvalidInput, root.Hume.InvalidTemp, root.Hume.TempResponse);
  }
}(this, function(ApiClient, InvalidInput, InvalidTemp, TempResponse) {
  'use strict';

  /**
   * Temperature service.
   * @module api/TemperatureApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TemperatureApi. 
   * @alias module:api/TemperatureApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getTemp operation.
     * @callback module:api/TemperatureApi~getTempCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TempResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve temperature's value
     * FR-3 Τhe user must be able to modify temperature
     * @param {String} username (Required) The username
     * @param {Number} zoneId (Required) The ID of the zone
     * @param {module:api/TemperatureApi~getTempCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TempResponse}
     */
    this.getTemp = function(username, zoneId, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getTemp");
      }

      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getTemp");
      }


      var pathParams = {
        'username': username,
        'zone_id': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TempResponse;

      return this.apiClient.callApi(
        '/user/{username}/zone/{zone_id}/temperature_status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyTemp operation.
     * @callback module:api/TemperatureApi~modifyTempCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify Temperature
     * FR-3 Τhe user must be able to modify temperature
     * @param {Number} temperatureStatus (Required) The temperature given by the user
     * @param {String} username (Required) The username
     * @param {Number} zoneId (Required) The ID of the zone
     * @param {module:api/TemperatureApi~modifyTempCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyTemp = function(temperatureStatus, username, zoneId, callback) {
      var postBody = null;

      // verify the required parameter 'temperatureStatus' is set
      if (temperatureStatus === undefined || temperatureStatus === null) {
        throw new Error("Missing the required parameter 'temperatureStatus' when calling modifyTemp");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling modifyTemp");
      }

      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling modifyTemp");
      }


      var pathParams = {
        'username': username,
        'zone_id': zoneId
      };
      var queryParams = {
        'temperature_status': temperatureStatus,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/{username}/zone/{zone_id}/temperature_status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
