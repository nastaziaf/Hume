/*
 * Hume
 * This is an API for Hume
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AlarmResponse', 'model/InvalidInput'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AlarmResponse'), require('../model/InvalidInput'));
  } else {
    // Browser globals (root is window)
    if (!root.Hume) {
      root.Hume = {};
    }
    root.Hume.AlarmApi = factory(root.Hume.ApiClient, root.Hume.AlarmResponse, root.Hume.InvalidInput);
  }
}(this, function(ApiClient, AlarmResponse) {
  'use strict';

  /**
   * Alarm service.
   * @module api/AlarmApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AlarmApi. 
   * @alias module:api/AlarmApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAlarmStatus operation.
     * @callback module:api/AlarmApi~getAlarmStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlarmResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve alarm's status
     * FR-5 Τhe user must be able to handle alarm system
     * @param {String} username (Required) The username
     * @param {Number} zoneId (Required) The ID of the zone
     * @param {module:api/AlarmApi~getAlarmStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlarmResponse}
     */
    this.getAlarmStatus = function(username, zoneId, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getAlarmStatus");
      }

      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getAlarmStatus");
      }


      var pathParams = {
        'username': username,
        'zone_id': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AlarmResponse;

      return this.apiClient.callApi(
        '/user/{username}/zone/{zone_id}/alarm_status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyAlarmStatus operation.
     * @callback module:api/AlarmApi~modifyAlarmStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle alarm's status
     * FR-5 Τhe user must be able to handle alarm system
     * @param {Boolean} alarmStatus (Required) The alarm's status given by the user
     * @param {String} username (Required) The username
     * @param {Number} zoneId (Required) The ID of the zone
     * @param {module:api/AlarmApi~modifyAlarmStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyAlarmStatus = function(alarmStatus, username, zoneId, callback) {
      var postBody = null;

      // verify the required parameter 'alarmStatus' is set
      if (alarmStatus === undefined || alarmStatus === null) {
        throw new Error("Missing the required parameter 'alarmStatus' when calling modifyAlarmStatus");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling modifyAlarmStatus");
      }

      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling modifyAlarmStatus");
      }


      var pathParams = {
        'username': username,
        'zone_id': zoneId
      };
      var queryParams = {
        'alarm_status': alarmStatus,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/{username}/zone/{zone_id}/alarm_status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
