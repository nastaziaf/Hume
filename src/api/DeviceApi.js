/*
 * Hume
 * This is an API for Hume
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  // Check if AMD (Asynchronous Module Definition) is supported
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddDeviceRequest', 'model/InvalidDeviceId', 'model/InvalidInput', 'model/SuccessfulDeviceGet', 'model/SuccessfulDeviceUpdate', 'model/UpdateDeviceRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddDeviceRequest'), require('../model/InvalidDeviceId'), require('../model/InvalidInput'), require('../model/SuccessfulDeviceGet'), require('../model/SuccessfulDeviceUpdate'), require('../model/UpdateDeviceRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.Hume) {
      root.Hume = {};
    }
    // Create and expose the DeviceApi for browser globals
    root.Hume.DeviceApi = factory(root.Hume.ApiClient, root.Hume.AddDeviceRequest, root.Hume.InvalidDeviceId, root.Hume.InvalidInput, root.Hume.SuccessfulDeviceGet, root.Hume.SuccessfulDeviceUpdate, root.Hume.UpdateDeviceRequest);
  }
}(this, function(ApiClient, AddDeviceRequest, InvalidDeviceId, InvalidInput, SuccessfulDeviceGet, SuccessfulDeviceUpdate, UpdateDeviceRequest) {
  'use strict';

  /**
   * Device service.
   * @module api/DeviceApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DeviceApi. 
   * @alias module:api/DeviceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addDevice operation.
     * @callback module:api/DeviceApi~addDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new smart device
     * FR2 - The user must be able to add smart devices in the system 
     * @param {String} username (Required) The user adds a new smart device
     * @param {module:model/AddDeviceRequest} body 
     * @param {module:api/DeviceApi~addDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addDevice = function(username, body, callback) {
      var postBody = body;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling addDevice");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDevice");
      }

      // Define path parameters for the API POST endpoint
      var pathParams = {
        'username': username
      };

      // Define query parameters for the API POST endpoint
      var queryParams = {
      };

      // Define collection qeury parameters for the API POST endpoint
      var collectionQueryParams = {
      };

      // Define header parameters for the API POST endpoint
      var headerParams = {
      };

      // Define form parameters for the API POST endpoint
      var formParams = {
      };

      // Define authentication names, content types, accepts, and return type for the API POST endpoint
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      // Call `callApi` method to make the actual POST request to add a new device
      return this.apiClient.callApi(
        '/user/{username}/device', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDevice operation.
     * @callback module:api/DeviceApi~deleteDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete smart device
     * FR4 - Τhe user must be able handle operation of smart devices
     * @param {String} username (Required) The username
     * @param {Number} deviceId (Required) The ID of the smart device
     * @param {module:api/DeviceApi~deleteDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDevice = function(username, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteDevice");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deleteDevice");
      }

      // Define path parameters for the API DELETE endpoint
      var pathParams = {
        'username': username,
        'device_id': deviceId
      };

      // Define query parameters for the API DELETE endpoint
      var queryParams = {
      };

      // Define collection query parameters for the API DELETE endpoint
      var collectionQueryParams = {
      };

      // Define header parameters for the API DELETE endpoint
      var headerParams = {
      };

      // Define form parameters for the API DELETE endpoint
      var formParams = {
      };

      // Define authentication names, content types, accepts, and return type for the API DELETE endpoint
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      // Call `callApi` method to make the actual POST request to delete an existed device
      return this.apiClient.callApi(
        '/user/{username}/device/{device_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevice operation.
     * @callback module:api/DeviceApi~getDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessfulDeviceGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve smart device
     * FR4 - Τhe user must be able handle operation of smart devices
     * @param {String} username (Required) The username
     * @param {Number} deviceId (Required) The ID of the smart device
     * @param {module:api/DeviceApi~getDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessfulDeviceGet}
     */
    this.getDevice = function(username, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getDevice");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getDevice");
      }

      // Define path parameters for the API GET endpoint
      var pathParams = {
        'username': username,
        'device_id': deviceId
      };

      // Define qeury parameters for the API GET endpoint
      var queryParams = {
      };

      // Define collection query parameters for the API GET endpoint
      var collectionQueryParams = {
      };

      // Define headers parameters for the API GET endpoint
      var headerParams = {
      };

      // Define form parameters for the API GET endpoint
      var formParams = {
      };

      // Define authentication names, content types, accepts, and return type for the API GET endpoint
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessfulDeviceGet;

      // Call `callApi` method to make the actual GET request for a device's informations 
      return this.apiClient.callApi(
        '/user/{username}/device/{device_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevices operation.
     * @callback module:api/DeviceApi~getDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<[DeviceResponse]>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all smart devices
     * FR4 - Τhe user must be able handle operation of smart devices
     * @param {String} username (Required) The username
     * @param {module:api/DeviceApi~getDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<[DeviceResponse]>}
     */
    this.getDevices = function(username, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getDevices");
      }

      // Define path parameters for the API GET endpoint
      var pathParams = {
        'username': username
      };

      // Define query parameters for the API GET endpoint
      var queryParams = {
      };

      // Define collection query parameters for the API GET endpoint
      var collectionQueryParams = {
      };

      // Define header parameters for the API GET endpoint
      var headerParams = {
      };

      // Define form  parameters for the API GET endpoint
      var formParams = {
      };

      // Define authentication names, content types, accepts, and return type for the API GET endpoint
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [[DeviceResponse]];

      // Call `callApi` method to make the actual GET request for a list with all devices
      return this.apiClient.callApi(
        '/user/{username}/device', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDevice operation.
     * @callback module:api/DeviceApi~updateDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessfulDeviceUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update smart device
     * FR4 - Τhe user must be able handle operation of smart devices
     * @param {String} deviceStatus (Required) The new smart device's operation that is given by the user
     * @param {String} username (Required) The username
     * @param {String} deviceName (Required) The name of the smart device
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceRequest} opts.body 
     * @param {module:api/DeviceApi~updateDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessfulDeviceUpdate}
     */
    this.updateDevice = function(deviceStatus, username, deviceName, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'deviceStatus' is set
      if (deviceStatus === undefined || deviceStatus === null) {
        throw new Error("Missing the required parameter 'deviceStatus' when calling updateDevice");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateDevice");
      }

      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling updateDevice");
      }

      // Define path parameters for the API PUT endpoint
      var pathParams = {
        'username': username,
        'device_name': deviceName
      };

      // Define query parameters for the API PUT endpoint
      var queryParams = {
        'device_status': deviceStatus,
      };

      // Define collection query parameters for the API PUT endpoint
      var collectionQueryParams = {
      };

      // Define header parameters for the API PUT endpoint
      var headerParams = {
      };

      // Define form parameters for the API PUT endpoint
      var formParams = {
      };

      // Define authentication names, content types, accepts, and return type for the API PUT endpoint
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessfulDeviceUpdate;

      // Call `callApi` method to make the actual PUT request to change a device's status
      return this.apiClient.callApi(
        '/user/{username}/device/{device_name}/deviceStatus', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
