/*
 * Hume
 * This is an API for Hume
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto-generated by the Swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

// Immediately Invoked Function Expression (IIFE) to encapsulate code and prevent global scope pollution
(function(root, factory) {
  // Check for AMD (Asynchronous Module Definition) support
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.js
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Hume);
  }
}(this, function(expect, Hume) {
  'use strict';

  // Variable to hold an instance of UserResponse
  var instance;

  // Test suite for the UserResponse
  describe('(package)', function() {
    describe('UserResponse', function() {

      // Setup a new instance before each test
      beforeEach(function() {
        instance = new Hume.UserResponse();
      });

      // Test case to check if it creates an instance of UserResponse
      it('should create an instance of UserResponse', function() {
        // TODO: update the code to test UserResponse
        expect(instance).to.be.a(Hume.UserResponse);
      });

      // Test case to check the 'fullname' property
      it('should have the property fullname (base name: "fullname")', function() {
        // TODO: update the code to test the property fullname
        expect(instance).to.have.property('fullname');
        // expect(instance.fullname).to.be(expectedValueLiteral);
      });

      // Test case to check the 'email' property
      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      // Test case to check the 'address' property
      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      // Test case to check the 'phone' property
      it('should have the property phone (base name: "phone")', function() {
        // TODO: update the code to test the property phone
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      // Test case to check the 'city' property
      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      // Test case to check the 'username' property
      it('should have the property username (base name: "username")', function() {
        // TODO: update the code to test the property username
        expect(instance).to.have.property('username');
        // expect(instance.username).to.be(expectedValueLiteral);
      });

      // Test case to check the 'password' property
      it('should have the property password (base name: "password")', function() {
        // TODO: update the code to test the property password
        expect(instance).to.have.property('password');
        // expect(instance.password).to.be(expectedValueLiteral);
      });

    });
  });

}));
